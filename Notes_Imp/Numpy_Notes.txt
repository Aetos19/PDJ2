# np.arrary([1, 2, 3])

# Create an array of zeros
	$ np.zeros((3, 4))

# Create an array of ones
	$ np.ones((2, 3, 4), dtype=int16)

# Create an array of evenly spaced values (step value) 
	$ d = np.arange(10, 25, 5)

# Create an array of ecenly spaced values (number of samples)
	$ np.linspace(0, 2, 9)

# Create a constant array
	$ e = np.full((2, 2), 7)

# Create a 2X2 identity matrix
	$ f = np.eye(2)

# Create an array with random values
	$ np.random.random((2, 2))

# Create an empty array
	# np.empty((3, 2))


**** Saving & Loading On Disk ****
	
	$ np.save('my_array', a)
	$ np.load('my_array.npy')

	$ np.savez('array.npz', a, b)

**** Saving & Loading Text Files ****

	$ np.loadtxt("myfile.txt")
	$ np.genfromtxt("my_file.csv", delimeter=",")
	$ np.savetxt("myarray.txt", a, delimeter=" ")

**** Data Types ****

	$ np.int64 		-> Signed 64-bit integer types
	$ np.flost32	-> Standard double-precision floating point
	$ np.complex	-> Complex number repreented by 128 floats
	$ np.bool		-> Boolean type storing TRUE and FALSE values
	$ np.object		-> Python object type
	$ np.string 	-> Fixed-length string type
	$ np.unicode	-> Fixed-length unicode type

**** Inspecting Your Array ****

# Array dimensions
	$ a.shape

# Length of array
	$ len(a)

# Number of array dimensions
	$ b.ndim

# Number of array elements
	$ e.size

# Data type of array elements
	$ b.dtype

# Name of data type
	$ b.dtype.name

# Convert an array to a different type
	$ b.astype(int)

# Asking for help
	$ np.info(np.ndarray.dtype)

**** Array Mathematics ****

# Subtraction
	$ g = a - b
	$ g = np.subtract(a, b)

# Addition
	$ b + a
	$ np.add(b, a)

# Division
	$ a / b
	$ np.divide(a, b)

# Multiplication
	$ a * b
	$ np.multiply(a, b)

# Exponentiation
	$ np.exp(b)

# Square root
	$ np.sqrt(b)

# Print sines of an array
	$ np.sin(b)

# Element-wise cosine
	$ np.cos(b)

# Element-wise natural logarithm
	$ np.log(a)

# Dot product
	$ e.dot(f)

**** Comparison ****

# Element-wise comparison
	$ a == b
	$ a < b

# Array-wise comparison
	$ np.array_equal(a, b)

**** Aggregate Functions ****

# Array-wise sum
	$ a.sum()

# Array-wise minimum value
	$ a.min()

# Maximum value of an array row
	$ b.max(axis=0)

# Cumulative sum of the elements
	$ b.cumsum(axis=1)

# Mean
	$ a.mean()

# Median
	$ np.median(a)

# Correlation coefficient
	$ np.corrcoef(a)

# Standard deviation
	$ np.std(b)

**** Subsetting, Slicing, Indexing ****

	$ a[0:2]

# Boolean Indexing
	$ a[a<2]

# Select elements (1,0), (0,1), (1,2) and (0,0)
	$ b[[1, 0, 1, 0], [0, 1, 2, 0]]

# Select a subset of the matrix's rows and columns
	$   array([[ 4. ,5. , 6. , 4. ], 
        	[ 1.5, 2. , 3. , 1.5],
        	[ 4. , 5. , 6. , 4. ],
        	[ 1.5, 2. , 3. , 1.5]])

**** Array Manipulation ****

# Permute array dimensions
	$ i = np.transpose(b)
	$ b.T

# Changing array shape
	
	# Flatten the array
		$ b.ravel()
	# Reshape, but don't chagne data
		$ g.reshape(3, -2)

# Adding/Removing Elements
	# Return a new array with shape (2,6)
		$ h.resize((2,6))

	# Append items to an array
		$ np.append(h,g)

	# Insert items in an array
		$ np.insert(a, 1, 5)

	# Delete items from an array
		$ np.delete(a, [1])

# Combining Arrays
	$ np.concatenate((a, d), axis=0)

	# Stack arrays vertically (row-wise)
		$ np.vstack((a, b))
		$ np.r_[e, f]

	# Stack arrays horizontally (column-wise)
		$ np.hstack((e, f))

	# Create stacked column-wise arrays
		$ np.column_stack((a,d))
		$np.c_[a, d]

# Splitting Arrays
	# Split the array horizontally at the 3rd index
		$ np.hsplit(a, 3)

	# Split the array vertically at the 3rd index
		$ np.vsplit(c, 2)

	aidalyn.alayla@arockee.com

	hack1918

# x = np.random.choice([False, True], size=100000)

	

