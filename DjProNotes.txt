# Documentation

# Docstrings

# Tests

# Comments

# One of the most valuable aspects of Django is its focus on application-based development.

# DynamicClass = type('DynamicClass', (), {'spam':'Eggs'})

# built-in function to assist in the identification of callable objects. -> callable(object) -> bool

# for key, value in kwargs.items():
	setattr(self, key, value)

•	 Required arguments
•	 Optional arguments
•	 Excess positional arguments
•	 Excess keyword arguments

	def complex_function(a, b=None, *args, **kwargs)

# arguments may be known in advance, long before the function will be called. In these cases, a function can have one or more of its arguments applied beforehand so that the function can be called with fewer arguments

	from functools import partial

	def add(a, b):
	    return a+b
	    
	plus3 = partial(add, 3)

	plus3(4) >>> 7

# import inspect; inspect.getargspec(fun_name) => ArgSpec(args=['a', 'b', 'c', 'd'], varargs='e', keywords='f', defaults=(True, False))

# inspect.getdoc(func)

# from django.utils.text import capfirst

# from django.db.models.loading import cache

	for app in cache.get_apps():
		print(app.__name__)

# clean(value, instance)—Validates the given value is appropriate for the model,

# URLs are the primary entry points to your site

# while views are the code that respond to incoming events. accepting a request and returning a response

# Rather than supplying all your URL patterns in a single file, the include() function allows them to be split up among multiple files

# from django.conf.urls import url, include

	•	 A regular expression to match against the incoming URL being requested
	•	 A reference to the view to be called
	•	 A name to be used to reference the view during reverse lookups

# http_method_names:

	•	 get
	•	 post
	•	 put
	•	 delete
	•	 head
	•	 options
	•	 trace

# forms.py

	from django import forms
	from .models import Post

	class PostForm(forms.ModelForm):
		class Meta:
			model = Post
			fields = ('title', 'text')

# views.py

	def post_new(request):
		form = PostForm(request.POST)
		if request.method == 'POST':
			if form.is_valid():
				post = form.save(commit=False)
				post.author = request.user
				post.published_date = timezone.now()
				post.save()
				return redirect('post_detail', pk=post.pk)
		else:
			form = PostForm
		return render(request, 'post_edit.html', {'form': form})

# file.html
	
	<form method="POST" class="XXX">
		{% csrf_token %}
		{{ form.as_p }}
		<button type="submit" class="save">Save</button>
	</form>

# from django.core.mail import EmailMessage

# 	books = Book.objects.filter(..)
	if books:
	  do_stuff_with_books(books)

#  If you aren't using the queryset use exist
	books = Book.objects.filter(..)
	if books.exists():
	  do_some_stuff()

# SubProcess
	
	import os
	stream = os.popen('echo $HOME')
	stream.read()

# from django.contrib.auth.decorators import login_required

# process.communicate() can reads input and output from the process

# The basic details of what the template syntax looks like and the included tags and filters are well described elsewhere.

# {% Template Tags %}

# Django Template Tags are simple Python functions that accept a value, an optional argument, and return a value to be displayed on the page.

	from django import template

	register = template.Library()

# register = template.Library(): This refers that you need to make sure, your templates are added to the existing library of tags and filters

	@register.assignment_tag
	def get_result_tag(arg1, arg2, arg3):
		"""
			asfj
		"""
		return "response"

# Example.html
	{% load app_tags %}
	{% get_result_tag arg1 arg2 arg3 as result %}

• simple_tag: Processes the data and returns a string
• inclusion_tag: Processes the data and returns a rendered template
• assignment_tag: Processes the data and sets a variable in the context

# Django will use the function's name as the tag name. If you want to register it with a different name, you can do it by specifying a name attribute like @register.simple_tag(name='my_tag')

# urlize => Converts URLs and email addresses in text into clickable links.

# It’s possible to store the tag results in a template variable rather than directly outputting it.

	{% current_time "%Y-%m-%d %I:%M %p" as the_time %}
	<p>The time is {{ the_time }}.</p>

# comment the code in HTML template

	{% comment "Optional Note" %}
		<p>Reason for disabling the code</p>
	{% endcomment %}

# cycle
	# Produces one of its arguments each time this tag is encountered.

		{% for o in some_list %}
			<tr class="{% cycle 'row1' 'row2' %}">
				...
			</tr>
		{% endfor %}

# for … empty, forloop.counter, 

# We can also use filters the "if" condition

	{% if messages|length >= 100 %}
	   You have lots of messages today!
	{% endif %}

# ifequal and ifnotequal

# It is {% now "jS F Y H:i" %}

#  DATE_FORMAT, DATETIME_FORMAT, SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT
























